import json
import logging
from seo_blog_agent.agent import SEOBlogAgent
from image_prompt_agent.agent import ImagePromptAgent

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("Orchestrator")

def main():
    """
    Demonstrates a multi-agent workflow where the SEOBlogAgent and ImagePromptAgent
    work together to create a blog post and its associated image prompts.
    """
    logger.info("--- Starting Multi-Agent Workflow ---")

    # 1. Initialize Agents
    seo_agent = SEOBlogAgent()
    image_agent = ImagePromptAgent()

    seo_agent.initialize()
    image_agent.initialize()

    # 2. Define Initial Input for the SEO Blog Agent
    blog_input = {
        "topic": "The Art of Japanese Gardening",
        "keywords": ["zen garden", "bonsai", "koi pond"],
        "audience": "homeowners",
        "tone": "informative",
        "style": "narrative"
    }
    logger.info(f"Initial input for SEOBlogAgent: {json.dumps(blog_input, indent=2)}")

    try:
        # 3. Process the input with the SEO Blog Agent
        seo_agent.process(blog_input)
        blog_output = seo_agent.output()
        logger.info("SEOBlogAgent finished processing.")
        print("\n--- SEO Blog Agent Output ---")
        print(json.dumps(blog_output, indent=2))

        # 4. Use the output from the SEO agent as input for the Image Prompt Agent
        image_prompts_from_blog = blog_output.get("image_prompts", [])
        if not image_prompts_from_blog:
            logger.warning("No image prompts were generated by the SEOBlogAgent.")
            return

        logger.info(f"Image prompts received from SEOBlogAgent: {image_prompts_from_blog}")

        # 5. Process each image prompt with the Image Prompt Agent
        generated_images_data = []
        for prompt_subject in image_prompts_from_blog:
            logger.info(f"Processing image prompt for: '{prompt_subject}'")
            image_input = {
                "base_subject": prompt_subject,
                "style": "photorealistic",
                "aspect_ratio": "4:3",
                "model": "dall-e",
                "modifiers": ["serene", "natural light"]
            }
            image_agent.process(image_input)
            image_output = image_agent.output()
            generated_images_data.append(image_output)

        logger.info("ImagePromptAgent finished processing all prompts.")
        print("\n--- Image Prompt Agent Outputs ---")
        print(json.dumps(generated_images_data, indent=2))

    except ValueError as e:
        logger.error(f"An error occurred in the workflow: {e}")
    finally:
        # 6. Shutdown all agents
        seo_agent.shutdown()
        image_agent.shutdown()
        logger.info("--- Multi-Agent Workflow Finished ---")

if __name__ == '__main__':
    main()